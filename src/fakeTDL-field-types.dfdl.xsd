<?xml version="1.0" encoding="UTF-8"?>

<schema
  xmlns="http://www.w3.org/2001/XMLSchema"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:fn="http://www.w3.org/2005/xpath-functions"
  xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:fakeTDL="urn:com.owlcyberdefense.fakeTDL"
  targetNamespace="urn:com.owlcyberdefense.fakeTDL">

  <!--
  DFDL Best practices suggest defining reusable field types in a separate schema file.

  This keeps the primary schema files cleaner and more declarative and
  encourages re-use rather than repeating many DFDL properties.

  It also simply makes editing easier, as the files stay more manageable in size,
  which keeps text editors working smoothly.

  Another best practice is if a simple type becomes a large enumeration taking up more
  than a screenful of lines, that such enum types are split out into a separate
  schema file.
  -->

  <include schemaLocation="fakeTDL-base.dfdl.xsd" />
  <include schemaLocation="fakeTDL-enum-entityTypeDetail.dfdl.xsd"/>

  <annotation>
    <appinfo source="http://www.ogf.org/dfdl/">

      <dfdl:format  ref="fakeTDL:baseFormat" />

    </appinfo>
  </annotation>

  <simpleType name="unitNumber"
              dfdl:lengthKind="implicit">
    <restriction base="xs:string">
      <minLength value="5"/>
      <maxLength value="5"/>
      <!--
      Note that the XML Schema dialect of regular expressions
      allowed in these pattern facets
      is very minimal compared to the regular expressions allowed
      in DFDL properties like dfdl:lengthPattern.
      -->
      <pattern value="[A-Z0-9]{2}[0-9]{3}"/>
    </restriction>
  </simpleType>

  <!--
  DFDL refers to date and time related concepts collectively with the term "calendar", which
  is a convention also used by many Java libraries.
  -->
  <simpleType name="timeOfDay"
              dfdl:calendarPatternKind="explicit"
              dfdl:calendarPattern="hhmmss"
              dfdl:binaryCalendarRep="bcd"
              dfdl:lengthKind="explicit"
              dfdl:length="3">
    <restriction base="xs:time"/>
  </simpleType>

  <simpleType name="mustAck"
              dfdl:binaryBooleanFalseRep="0"
              dfdl:binaryBooleanTrueRep="1"
              dfdl:lengthKind="explicit"
              dfdl:length="1">
    <restriction base="xs:boolean"/>
  </simpleType>

  <simpleType name="messageID"
              dfdl:lengthKind="implicit">
    <restriction base="xs:unsignedInt">
      <maxInclusive value="99999"/>
    </restriction>
  </simpleType>

  <simpleType name="latitude_degrees"
    dfdl:binaryFloatRep="ieee">
    <restriction base="xs:float">
      <minInclusive value="-90.0"/>
      <maxInclusive value="90.0"/>
    </restriction>
  </simpleType>

  <simpleType name="longitude_degrees"
              dfdl:binaryFloatRep="ieee"
              dfdl:lengthKind="implicit">
    <annotation><appinfo source="http://www.ogf.org/dfdl/">
      <!--
      Here is a commented-out assertion that illustrates a bad practice that
      DFDL beginners often seem to do.

      The idea is to insert dfdl:assert that enforce validity as well
      as well-formedness on the data. I.e., why bother with more parsing
      if the data is invalid?

      A dfdl:assert of dfdl:checkConstraints tells the DFDL parser to validate
      the well-formed data against the facets and, if it fails, to escalate
      that to a parse error.

      This is a bad idea for a number of reasons
      (1) you cannot use the schema to parse invalid data and study it
      (2) improper separation of concerns - applications might require use of a
          separate validator.
      (3) DFDL speculative parsing backtracks and tries other possibilities on
          parse errors. Data having invalid values is usually NOT a reason to
          backtrack and try other alternatives if the data is well-formed.

      <dfdl:assert>{ dfdl:checkConstraints(.) }</dfdl:assert>

      There are reasons to use checkConstraints, but forcing validity
      on the parse process is not one of them.
      -->
    </appinfo></annotation>
    <restriction base="xs:float">
      <minInclusive value="-180.0"/>
      <maxInclusive value="180.0"/>
    </restriction>
  </simpleType>

  <simpleType name="elevation_25FeetMSL"
              dfdl:lengthKind="implicit">
    <annotation><documentation>
      Units are 25 feet above Mean Sea Level.
    </documentation></annotation>
    <restriction base="xs:short">
      <minInclusive value="-1000"/>
      <maxInclusive value="32000"/>
    </restriction>
  </simpleType>

  <simpleType name="trackPointType" dfdl:lengthKind="implicit">
    <restriction base="xs:string">
      <minLength value="1"/>
      <maxLength value="1"/>
      <enumeration value="S"/><!-- start point -->
      <enumeration value="W"/><!-- way point -->
      <enumeration value="E"/><!-- end point -->
    </restriction>
  </simpleType>

  <simpleType name="trackPointQuality">
    <restriction base="xs:string">
      <minLength value="1"/>
      <maxLength value="1"/>
      <enumeration value="E"/><!-- estimated -->
      <enumeration value="A"/><!-- actual or observed -->
    </restriction>
  </simpleType>

  <simpleType name="course_integerDegrees"
              dfdl:lengthKind="implicit">
    <restriction base="xs:unsignedShort">
      <minInclusive value="0"/>
      <maxInclusive value="359"/>
    </restriction>
  </simpleType>

  <simpleType name="speed_dataMilesPerHour"
              dfdl:lengthKind="implicit">
    <annotation><documentation>
      Units are data-miles per hour. A data-mile is 6000 feet.
    </documentation></annotation>
    <restriction base="xs:unsignedShort">
      <maxInclusive value="2000"/>
    </restriction>
  </simpleType>

  <simpleType name="IFF"><!-- IFF = Identity Friend or Foe -->
    <restriction base="xs:string">
      <minLength value="1"/>
      <maxLength value="1"/>
      <enumeration value="U"/><!-- unknown -->
      <enumeration value="F"/><!-- friend -->
      <enumeration value="E"/><!-- enemy -->
    </restriction>
  </simpleType>

  <simpleType name="category">
    <restriction base="xs:string">
      <minLength value="1"/>
      <maxLength value="1"/>
      <enumeration value="L"/><!-- land -->
      <enumeration value="S"/><!-- sea (surface) -->
      <enumeration value="U"/><!-- sub -->
      <enumeration value="A"/><!-- air as in aircraft -->
      <enumeration value="W"/><!-- weapon such as missile or torpedo -->
    </restriction>
  </simpleType>

  <simpleType name="identDescription"
    dfdl:textTrimKind="padChar"
    dfdl:textPadKind="padChar"
    dfdl:textStringPadCharacter="%#r00;"
    dfdl:lengthKind="explicit"
    dfdl:length="38">
    <annotation><documentation>
      Max length 38 characters. Unused characters at the end are filled with NUL.
      Allowed characters are "A-Z0-9.-_/()[]:" but must begin with A-Z or digit.
      Spaces are allowed, but cannot be leading nor trailing, and multiple spaces in a row
      are also not allowed, multiple punctuation in a row are also not allowed.
      Parenthesis and brackets should be matched properly, but there is no way to
      enforce that from a regular expression pattern.
    </documentation></annotation>
    <restriction base="xs:string">
      <minLength value="1"/>
      <maxLength value="38"/>
      <pattern value="[A-Z0-9]{1,38}([. \-_:/][A-Z0-9()\[\]]{1,38}){0,38}"/>
    </restriction>
  </simpleType>


</schema>
